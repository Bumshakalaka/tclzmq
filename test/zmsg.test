package require tcltest
set auto_path [list ../lib {*}$auto_path]
package require zmq 3

tcltest::test zmsg-recv-1 {zmsg} -body {
    zmsg recv
} -returnCodes {error} -result {wrong # args: should be "zmsg recv socket"}

tcltest::test zmsg-recv-2 {zmsg} -body {
    zmsg recv s
} -returnCodes {error} -result {invalid command name "s"}

tcltest::test zmsg-recv-3 {zmsg} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    req sendmore "message"
    req send "more"
} -body {
    zmsg recv rep
} -cleanup {
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message more}



tcltest::test zmsg-send-1 {zmsg} -body {
    zmsg send
} -returnCodes {error} -result {wrong # args: should be "zmsg send socket msgl"}

tcltest::test zmsg-send-2 {zmsg} -body {
    zmsg send s msgl
} -returnCodes {error} -result {invalid command name "s"}

tcltest::test zmsg-send-3 {zmsg} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
} -body {
    zmsg send req {a b c d e}
    zmsg recv rep
} -cleanup {
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {a b c d e}



tcltest::test zmsg-unwrap-1 {zmsg} -body {
    zmsg unwrap
} -returnCodes {error} -result {wrong # args: should be "zmsg unwrap msglnm"}

tcltest::test zmsg-unwrap-2 {zmsg} -body {
    set msgl {a b c d e}
    set val [zmsg unwrap msgl]
    list $msgl $val
} -returnCodes {ok} -result {{b c d e} a}

tcltest::test zmsg-unwrap-3 {zmsg} -body {
    set msgl {a {} b {} c d e}
    set val1 [zmsg unwrap msgl]
    set val2 [zmsg unwrap msgl]
    set val3 [zmsg unwrap msgl]
    list $msgl $val3 $val2 $val1
} -returnCodes {ok} -result {{d e} c b a}



tcltest::test zmsg-wrap-1 {zmsg} -body {
    zmsg wrap
} -returnCodes {error} -result {wrong # args: should be "zmsg wrap msgl data"}

tcltest::test zmsg-wrap-2 {zmsg} -body {
    zmsg wrap a b
} -returnCodes {ok} -result {b {} a}



tcltest::test zmsg-push-1 {zmsg} -body {
    zmsg push
} -returnCodes {error} -result {wrong # args: should be "zmsg push msgl data"}

tcltest::test zmsg-push-2 {zmsg} -body {
    zmsg push a b
} -returnCodes {ok} -result {b a}



tcltest::test zmsg-pop-1 {zmsg} -body {
    zmsg pop
} -returnCodes {error} -result {wrong # args: should be "zmsg pop msglnm"}

tcltest::test zmsg-pop-2 {zmsg} -body {
    set msgl {a b c d e}
    set val [zmsg pop msgl]
    list $msgl $val
} -returnCodes {ok} -result {{b c d e} a}

tcltest::test zmsg-pop-3 {zmsg} -body {
    set msgl {a {} b {} c d e}
    set val1 [zmsg pop msgl]
    set val2 [zmsg pop msgl]
    set val3 [zmsg pop msgl]
    list $msgl $val3 $val2 $val1
} -returnCodes {ok} -result {{{} c d e} b {} a}



tcltest::test zmsg-add-1 {zmsg} -body {
    zmsg add
} -returnCodes {error} -result {wrong # args: should be "zmsg add msgl data"}

tcltest::test zmsg-add-2 {zmsg} -body {
    zmsg add {a b} c
} -returnCodes {ok} -result {a b c}



tcltest::test zmsg-dump-1 {zmsg} -body {
    zmsg dump
} -returnCodes {error} -result {wrong # args: should be "zmsg dump msgl"}

tcltest::test zmsg-dump-2 {zmsg} -body {
    zmsg dump {a b c d}
} -returnCodes {ok} -result {{[001] a} {[001] b} {[001] c} {[001] d}}

# cleanup
::tcltest::cleanupTests
return

