package require tcltest
set auto_path [list ../lib {*}$auto_path]
package require -exact zmq 3.2

tcltest::test socket-1 {zmq socket} -body {
    zmq socket
} -returnCodes {error} -result {wrong # args: should be "zmq socket ?name? context type"}

tcltest::test socket-2.1 {zmq socket} -body {
    zmq socket s c t
} -returnCodes {error} -result {context "c" does not exists}

tcltest::test socket-2.2 {zmq socket} -body {
    zmq socket c t
} -returnCodes {error} -result {context "c" does not exists}

tcltest::test socket-3.1 {zmq socket} -setup {
    zmq context ctx
} -body {
    zmq socket s ctx t
} -cleanup {
    ctx term
} -returnCodes {error} -result {bad type "t": must be PAIR, PUB, SUB, REQ, REP, DEALER, ROUTER, PULL, PUSH, XPUB, or XSUB}

tcltest::test socket-3.2 {zmq socket} -setup {
    zmq context ctx
} -body {
    zmq socket ctx t
} -cleanup {
    ctx term
} -returnCodes {error} -result {bad type "t": must be PAIR, PUB, SUB, REQ, REP, DEALER, ROUTER, PULL, PUSH, XPUB, or XSUB}

tcltest::test socket-4.1 {zmq socket} -setup {
    zmq context ctx
} -body {
    zmq socket s ctx PUB
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {::s}

tcltest::test socket-4.2 {zmq socket} -setup {
    zmq context ctx
} -body {
    set s [zmq socket ctx PUB]
    string match "::zmq*" $s
} -cleanup {
    $s close
    ctx term
} -returnCodes {ok} -result {1}

tcltest::test socket-5 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    zmq socket s ctx PUB
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {command "::s" already exists, unable to create object}

tcltest::test socket-6 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s method ?argument ...?"}

tcltest::test socket-7 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad method "qwerty": must be bind, cget, close, configure, connect, destroy, disconnect, get, getsockopt, readable, recv_msg, send_msg, dump, recv, send, sendmore, set, setsockopt, unbind, writable, recv_monitor_event, or monitor}



tcltest::test socket-bind-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s bind
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s bind endpoint"}

tcltest::test socket-bind-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s bind qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Invalid argument}

tcltest::test socket-bind-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s bind "tcp://*:10003"
} -cleanup {
    s close
    ctx term
} -returnCodes {ok}



tcltest::test socket-unbind-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s unbind
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s unbind endpoint"}

tcltest::test socket-unbind-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
    s bind "tcp://*:10003"
} -body {
    s unbind "tcp://*:10003"
} -cleanup {
    s close
    ctx term
} -returnCodes {ok}



tcltest::test socket-close-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s close qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s close "}

tcltest::test socket-close-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s close
} -cleanup {
    ctx term
} -returnCodes {ok}



tcltest::test socket-destroy-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s destroy qwerty
} -cleanup {
    s destroy
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s destroy "}

tcltest::test socket-destroy-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s destroy
} -cleanup {
    ctx term
} -returnCodes {ok}



tcltest::test socket-connect-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s connect
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s connect endpoint"}

tcltest::test socket-connect-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s connect qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Invalid argument}

tcltest::test socket-connect-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s connect "tcp://localhost:10003"
} -cleanup {
    s close
    ctx term
} -returnCodes {ok}



tcltest::test socket-disconnect-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s disconnect
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s disconnect endpoint"}

tcltest::test socket-disconnect-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
    s connect "tcp://localhost:10003"
} -body {
    s disconnect "tcp://localhost:10003"
} -cleanup {
    s close
    ctx term
} -returnCodes {ok}



tcltest::test socket-getsockopt-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s getsockopt
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s getsockopt name"}

tcltest::test socket-getsockopt-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s getsockopt qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad name "qwerty": must be HWM, SNDHWM, RCVHWM, AFFINITY, IDENTITY, SUBSCRIBE, UNSUBSCRIBE, RATE, RECOVERY_IVL, SNDBUF, RCVBUF, RCVMORE, FD, EVENTS, TYPE, LINGER, RECONNECT_IVL, BACKLOG, RECONNECT_IVL_MAX, MAXMSGSIZE, MULTICAST_HOPS, RCVTIMEO, SNDTIMEO, IPV4ONLY, LAST_ENDPOINT, TCP_KEEPALIVE, TCP_KEEPALIVE_CNT, TCP_KEEPALIVE_IDLE, TCP_KEEPALIVE_INTVL, TCP_ACCEPT_FILTER, DELAY_ATTACH_ON_CONNECT, ROUTER_MANDATORY, or XPUB_VERBOSE}

tcltest::test socket-getsockopt-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    set ok 0
    foreach name {SNDHWM RCVHWM TYPE LINGER RECONNECT_IVL RECONNECT_IVL_MAX BACKLOG RCVMORE RATE SNDBUF RCVBUF RECOVERY_IVL MULTICAST_HOPS RCVTIMEO SNDTIMEO IPV4ONLY EVENTS AFFINITY MAXMSGSIZE IDENTITY LAST_ENDPOINT TCP_KEEPALIVE TCP_KEEPALIVE_CNT TCP_KEEPALIVE_IDLE TCP_KEEPALIVE_INTVL DELAY_ATTACH_ON_CONNECT } {
	if {![catch {s getsockopt $name} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    set ok
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {26}

tcltest::test socket-getsockopt-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    set failed 0
    foreach name {HWM SUBSCRIBE UNSUBSCRIBE FD FAIL_UNTOUTABLE ROUTER_BEHAVIOR TCP_ACCEPT_FILTER} {
	if {[catch {s getsockopt $name} msg]} {
	    incr failed
	}
    }
    set failed
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {7}



tcltest::test socket-cget-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s cget
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s cget name"}

tcltest::test socket-cget-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s cget qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad name "qwerty": must be HWM, SNDHWM, RCVHWM, AFFINITY, IDENTITY, SUBSCRIBE, UNSUBSCRIBE, RATE, RECOVERY_IVL, SNDBUF, RCVBUF, RCVMORE, FD, EVENTS, TYPE, LINGER, RECONNECT_IVL, BACKLOG, RECONNECT_IVL_MAX, MAXMSGSIZE, MULTICAST_HOPS, RCVTIMEO, SNDTIMEO, IPV4ONLY, LAST_ENDPOINT, TCP_KEEPALIVE, TCP_KEEPALIVE_CNT, TCP_KEEPALIVE_IDLE, TCP_KEEPALIVE_INTVL, TCP_ACCEPT_FILTER, DELAY_ATTACH_ON_CONNECT, ROUTER_MANDATORY, or XPUB_VERBOSE}

tcltest::test socket-cget-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    set ok 0
    foreach name {SNDHWM RCVHWM TYPE LINGER RECONNECT_IVL RECONNECT_IVL_MAX BACKLOG RCVMORE RATE SNDBUF RCVBUF RECOVERY_IVL MULTICAST_HOPS RCVTIMEO SNDTIMEO IPV4ONLY EVENTS AFFINITY MAXMSGSIZE IDENTITY LAST_ENDPOINT TCP_KEEPALIVE TCP_KEEPALIVE_CNT TCP_KEEPALIVE_IDLE TCP_KEEPALIVE_INTVL DELAY_ATTACH_ON_CONNECT} {
	if {![catch {s cget $name} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    set ok
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {26}

tcltest::test socket-cget-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    set failed 0
    foreach name {HWM SUBSCRIBE UNSUBSCRIBE FD FAIL_UNTOUTABLE ROUTER_BEHAVIOR TCP_ACCEPT_FILTER} {
	if {[catch {s cget $name} msg]} {
	    incr failed
	}
    }
    set failed
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {7}


tcltest::test socket-readable-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s readable 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s readable ?command?"}

tcltest::test socket-readable-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s readable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {}

tcltest::test socket-readable-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s readable qwerty
    s readable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {qwerty}



tcltest::test socket-recv-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s recv_msg
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s recv_msg message ?flags?"}

tcltest::test socket-recv-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s recv_msg m
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {message "m" does not exists}

tcltest::test socket-recv-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mreq -data "message"
    zmq message mrep
    req send_msg mreq
} -body {
    rep recv_msg mrep
    mrep data
} -cleanup {
    mrep close
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-send-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s send_msg
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s send_msg message ?flags?"}

tcltest::test socket-send-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s send_msg m
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {message "m" does not exists}

tcltest::test socket-send-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mreq -data "message"
    zmq message mrep
} -body {
    req send_msg mreq
    rep recv_msg mrep
    mrep data
} -cleanup {
    mrep close
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-dump-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s dump 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s dump "}

tcltest::test socket-dump-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mreq -data "message"
} -body {
    req send_msg mreq
    rep dump
} -cleanup {
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {{[007] message}}



tcltest::test socket-srecv-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s recv 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s recv ?flags?"}

tcltest::test socket-recv-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mreq -data "message"
    req send_msg mreq
} -body {
    rep recv
} -cleanup {
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}

tcltest::test socket-srecv-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s recv QWERTY
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad flag "QWERTY": must be DONTWAIT, NOBLOCK, or SNDMORE}

tcltest::test socket-recv-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mreq -data "message"
    req send_msg mreq
    after 10
} -body {
    rep recv NOBLOCK
} -cleanup {
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-s_send-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s send
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s send data ?flags?"}

tcltest::test socket-s_send-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mrep
} -body {
    req send "message"
    rep recv_msg mrep
    mrep data
} -cleanup {
    mrep close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}

tcltest::test socket-s_send-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s send "test" QWERTY
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad flag "QWERTY": must be DONTWAIT, NOBLOCK, or SNDMORE}

tcltest::test socket-s_send-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mrep
} -body {
    req send "message" NOBLOCK
    after 10
    rep recv_msg mrep
    mrep data
} -cleanup {
    mrep close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-sendmore-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s sendmore
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s sendmore data ?flags?"}

tcltest::test socket-sendmore-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mrep
    zmq message mrep_more
} -body {
    req sendmore "message"
    req send "more"
    rep recv_msg mrep
    rep recv_msg mrep_more
    set r [mrep data][mrep_more data]
} -cleanup {
    mrep close
    mrep_more close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {messagemore}

tcltest::test socket-sendmore-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s sendmore "test" QWERTY
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad flag "QWERTY": must be DONTWAIT, NOBLOCK, or SNDMORE}

tcltest::test socket-sendmore-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mrep
    zmq message mrep_more
} -body {
    req sendmore "message" [list SNDMORE]
    req send "more"
    rep recv_msg mrep
    rep recv_msg mrep_more
    set r [mrep data][mrep_more data]
} -cleanup {
    mrep close
    mrep_more close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {messagemore}



tcltest::test socket-setsockopt-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s setsockopt
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s setsockopt name value ?size?"}

tcltest::test socket-setsockopt-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s setsockopt qwerty azerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad name "qwerty": must be HWM, SNDHWM, RCVHWM, AFFINITY, IDENTITY, SUBSCRIBE, UNSUBSCRIBE, RATE, RECOVERY_IVL, SNDBUF, RCVBUF, RCVMORE, FD, EVENTS, TYPE, LINGER, RECONNECT_IVL, BACKLOG, RECONNECT_IVL_MAX, MAXMSGSIZE, MULTICAST_HOPS, RCVTIMEO, SNDTIMEO, IPV4ONLY, LAST_ENDPOINT, TCP_KEEPALIVE, TCP_KEEPALIVE_CNT, TCP_KEEPALIVE_IDLE, TCP_KEEPALIVE_INTVL, TCP_ACCEPT_FILTER, DELAY_ATTACH_ON_CONNECT, ROUTER_MANDATORY, or XPUB_VERBOSE}

tcltest::test socket-setsockopt-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx SUB
    zmq socket r ctx ROUTER
#    zmq socket p ctx PUB
} -body {
    set ok 0
    foreach name {HWM SNDHWM RCVHWM LINGER RECONNECT_IVL RECONNECT_IVL_MAX BACKLOG RATE RECOVERY_IVL SNDBUF RCVBUF MULTICAST_HOPS RCVTIMEO SNDTIMEO IPV4ONLY TCP_KEEPALIVE TCP_KEEPALIVE_CNT TCP_KEEPALIVE_IDLE TCP_KEEPALIVE_INTVL DELAY_ATTACH_ON_CONNECT} {
	if {![catch {s setsockopt $name 1} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {ROUTER_MANDATORY} {
	if {![catch {r setsockopt $name 0} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    # foreach name {XPUB_VERBOSE} {
    # 	if {![catch {p setsockopt $name 0} msg]} {
    # 	    incr ok
    # 	} else {
    # 	    puts "$name : $msg"
    # 	}
    # }
    foreach name {AFFINITY} {
	if {![catch {s setsockopt $name 0} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {MAXMSGSIZE} {
	if {![catch {s setsockopt $name 0} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {IDENTITY SUBSCRIBE UNSUBSCRIBE} {
	if {![catch {s setsockopt $name "azerty"} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {TCP_ACCEPT_FILTER} {
	if {![catch {s setsockopt $name "1.2.3.4"} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    set ok
} -cleanup {
    s close
    r close
    ctx term
} -returnCodes {ok} -result {27}

tcltest::test socket-setsockopt-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    set failed 0
    foreach name {FD EVENTS TYPE RCVMORE LAST_ENDPOINT LAST_ENDPOINT_ID} {
	if {[catch {s setsockopt $name {}} msg]} {
	    incr failed
	}
    }
    set failed
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {6}

tcltest::test socket-setsockopt-5 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s setsockopt HWM non_int
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Wrong HWM argument, expected integer}

tcltest::test socket-setsockopt-6 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s setsockopt IDENTITY "test id" non_int
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Wrong size argument, expected integer}



tcltest::test socket-writable-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s writable 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s writable ?command?"}

tcltest::test socket-writable-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s writable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {}

tcltest::test socket-writable-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket s ctx PUB
} -body {
    s writable qwerty
    s writable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {qwerty}



tcltest::test socket-getsockopt-events-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mrep
    zmq message mrep_more
} -body {
    set rt {}
    after 10
    lappend rt 1 [rep getsockopt EVENTS]
    lappend rt [req getsockopt EVENTS]
    req sendmore "message"
    req send "more"
    after 10
    lappend rt 2 [rep getsockopt EVENTS]
    lappend rt [req getsockopt EVENTS]
    rep recv_msg mrep
    rep recv_msg mrep_more
    after 10
    lappend rt 3 [rep getsockopt EVENTS]
    lappend rt [req getsockopt EVENTS]
} -cleanup {
    mrep close
    mrep_more close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {1 {} POLLOUT 2 POLLIN {} 3 POLLOUT {}}

tcltest::test socket-cget-events-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep bind "tcp://*:10003"
    zmq socket req ctx REQ
    req connect "tcp://localhost:10003"
    zmq message mrep
    zmq message mrep_more
} -body {
    set rt {}
    after 10
    lappend rt 1 [rep cget EVENTS]
    lappend rt [req cget EVENTS]
    req sendmore "message"
    req send "more"
    after 10
    lappend rt 2 [rep cget EVENTS]
    lappend rt [req cget EVENTS]
    rep recv_msg mrep
    rep recv_msg mrep_more
    after 10
    lappend rt 3 [rep cget EVENTS]
    lappend rt [req cget EVENTS]
} -cleanup {
    mrep close
    mrep_more close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {1 {} POLLOUT 2 POLLIN {} 3 POLLOUT {}}

tcltest::test socket-configure-1 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep configure QWERTY
} -cleanup {
    rep close
    ctx term
} -returnCodes {error} -result {bad name "QWERTY": must be HWM, SNDHWM, RCVHWM, AFFINITY, IDENTITY, SUBSCRIBE, UNSUBSCRIBE, RATE, RECOVERY_IVL, SNDBUF, RCVBUF, RCVMORE, FD, EVENTS, TYPE, LINGER, RECONNECT_IVL, BACKLOG, RECONNECT_IVL_MAX, MAXMSGSIZE, MULTICAST_HOPS, RCVTIMEO, SNDTIMEO, IPV4ONLY, LAST_ENDPOINT, TCP_KEEPALIVE, TCP_KEEPALIVE_CNT, TCP_KEEPALIVE_IDLE, TCP_KEEPALIVE_INTVL, TCP_ACCEPT_FILTER, DELAY_ATTACH_ON_CONNECT, ROUTER_MANDATORY, or XPUB_VERBOSE}

tcltest::test socket-configure-2 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep configure SNDHWM
} -cleanup {
    rep close
    ctx term
} -returnCodes {ok} -result {SNDHWM 1000}

tcltest::test socket-configure-3 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
    rep configure SNDHWM 2222
} -body {
    rep configure SNDHWM
} -cleanup {
    rep close
    ctx term
} -returnCodes {ok} -result {SNDHWM 2222}

tcltest::test socket-configure-4 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep configure
} -cleanup {
    rep close
    ctx term
} -returnCodes {ok} -result {{SNDHWM 1000} {RCVHWM 1000} {AFFINITY 0} {IDENTITY {}} {RATE 100} {RECOVERY_IVL 10000} {SNDBUF 0} {RCVBUF 0} {RCVMORE 0} {EVENTS {}} {TYPE 4} {LINGER -1} {RECONNECT_IVL 100} {BACKLOG 100} {RECONNECT_IVL_MAX 0} {MAXMSGSIZE -1} {MULTICAST_HOPS 1} {RCVTIMEO -1} {SNDTIMEO -1} {IPV4ONLY 1} {LAST_ENDPOINT {}} {TCP_KEEPALIVE -1} {TCP_KEEPALIVE_CNT -1} {TCP_KEEPALIVE_IDLE -1} {TCP_KEEPALIVE_INTVL -1} {DELAY_ATTACH_ON_CONNECT 0}}

tcltest::test socket-configure-5 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep configure SNDHWM 1000 QWERTY
    rep configure
} -cleanup {
    rep close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "rep configure ?name? ?value option value ...?"}

tcltest::test socket-configure-6 {zmq socket} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep configure SNDHWM 3000 RCVHWM 4000
    set rt [list]
    lappend rt [rep cget SNDHWM]
    lappend rt [rep cget RCVHWM]
} -cleanup {
    rep close
    ctx term
} -returnCodes {ok} -result {3000 4000}

tcltest::test socket-monitor-3 {zmq socket monitor} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep monitor a e
} -cleanup {
    rep close
    ctx term
} -returnCodes {error} -result {bad monitor_event_flag "e": must be CONNECTED, CONNECT_DELAYED, CONNECT_RETRIED, LISTENING, BIND_FAILED, ACCEPTED, ACCEPT_FAILED, CLOSED, CLOSE_FAILED, DISCONNECTED, or ALL}

tcltest::test socket-monitor-4 {zmq socket monitor} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep monitor a ALL
} -cleanup {
    rep close
    ctx term
} -returnCodes {error} -result {Invalid argument}

tcltest::test socket-monitor-5 {zmq socket monitor} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep monitor inproc://monitor
} -cleanup {
    rep close
    ctx term
} -returnCodes {ok} -result {}

tcltest::test socket-monitor-6 {zmq socket monitor} -setup {
    zmq context ctx
    zmq socket rep ctx REP
} -body {
    rep monitor inproc://monitor {ACCEPTED DISCONNECTED}
} -cleanup {
    rep close
    ctx term
} -returnCodes {ok} -result {}

# cleanup
::tcltest::cleanupTests
return

