package require tcltest
package require zmq

tcltest::test socket-1 {zmq socket} -body {
    zmq socket
} -returnCodes {error} -result {wrong # args: should be "zmq socket name context type"}

tcltest::test socket-2 {zmq socket} -body {
    zmq socket s c t
} -returnCodes {error} -result {context "c" does not exists}

tcltest::test socket-3 {zmq socket} -setup {
    zmq context ctx 1
} -body {
    zmq socket s ctx t
} -cleanup {
    ctx term
} -returnCodes {error} -result {bad type "t": must be PAIR, PUB, SUB, REQ, REP, DEALER, ROUTER, PULL, PUSH, XPUB, or XSUB}

tcltest::test socket-4 {zmq socket} -setup {
    zmq context ctx 1
} -body {
    zmq socket s ctx PUB
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {::s}

tcltest::test socket-5 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    zmq socket s ctx PUB
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {command "::s" already exists, unable to create object}

tcltest::test socket-6 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s method ?argument ...?"}

tcltest::test socket-7 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad method "qwerty": must be bind, close, connect, getsockopt, readable, recv, send, s_dump, s_recv, s_send, s_sendmore, setsockopt, or writable}



tcltest::test socket-bind-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s bind
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s bind addr"}

tcltest::test socket-bind-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s bind qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Invalid argument}

tcltest::test socket-bind-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s bind "ipc://test"
} -cleanup {
    s close
    ctx term
} -returnCodes {ok}



tcltest::test socket-close-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s close qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s close "}

tcltest::test socket-close-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s close
} -cleanup {
    ctx term
} -returnCodes {ok}



tcltest::test socket-connect-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s connect
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s connect addr"}

tcltest::test socket-connect-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s connect qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Invalid argument}

tcltest::test socket-connect-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s connect "ipc://test"
} -cleanup {
    s close
    ctx term
} -returnCodes {ok}



tcltest::test socket-getsockopt-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s getsockopt
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s getsockopt name"}

tcltest::test socket-getsockopt-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s getsockopt qwerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad name "qwerty": must be HWM, SWAP, AFFINITY, IDENTITY, SUBSCRIBE, UNSUBSCRIBE, RATE, RECOVERY_IVL, MCAST_LOOP, SNDBUF, RCVBUF, RCVMORE, FD, EVENTS, TYPE, LINGER, RECONNECT_IVL, BACKLOG, RECOVERY_IVL_MSEC, or RECONNECT_IVL_MAX}

tcltest::test socket-getsockopt-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    set ok 0
    foreach name {HWM SWAP AFFINITY IDENTITY RATE RECOVERY_IVL MCAST_LOOP SNDBUF RCVBUF RCVMORE EVENTS TYPE LINGER RECONNECT_IVL BACKLOG RECOVERY_IVL_MSEC RECONNECT_IVL_MAX} {
	if {![catch {s getsockopt $name} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    set ok
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {17}

tcltest::test socket-getsockopt-4 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    set failed 0
    foreach name {SUBSCRIBE UNSUBSCRIBE FD} {
	if {[catch {s getsockopt $name} msg]} {
	    incr failed
	}
    }
    set failed
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {3}



tcltest::test socket-readable-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s readable 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s readable ?command?"}

tcltest::test socket-readable-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s readable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {}

tcltest::test socket-readable-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s readable qwerty
    s readable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {qwerty}



tcltest::test socket-recv-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s recv
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s recv message ?flags?"}

tcltest::test socket-recv-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s recv m
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {message "m" does not exists}

tcltest::test socket-recv-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mreq -data "message"
    zmq message mrep
    req send mreq
} -body {
    rep recv mrep
    mrep data
} -cleanup {
    mrep close
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-send-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s send
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s send message ?flags?"}

tcltest::test socket-send-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s send m
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {message "m" does not exists}

tcltest::test socket-send-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mreq -data "message"
    zmq message mrep
} -body {
    req send mreq
    rep recv mrep
    mrep data
} -cleanup {
    mrep close
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-s_dump-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s s_dump 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s s_dump "}

tcltest::test socket-s_dump {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mreq -data "message"
} -body {
    req send mreq
    rep s_dump
} -cleanup {
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {{[007] message}}



tcltest::test socket-srecv-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s s_recv 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s s_recv "}

tcltest::test socket-recv-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mreq -data "message"
    req send mreq
} -body {
    rep s_recv
} -cleanup {
    mreq close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-s_send-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s s_send
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s s_send data"}

tcltest::test socket-send-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mrep
} -body {
    req s_send "message"
    rep recv mrep
    mrep data
} -cleanup {
    mrep close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {message}



tcltest::test socket-s_sendmore-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s s_sendmore
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s s_sendmore data"}

tcltest::test socket-sendmore-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mrep
    zmq message mrep_more
} -body {
    req s_sendmore "message"
    req s_send "more"
    rep recv mrep
    rep recv mrep_more
    set r [mrep data][mrep_more data]
} -cleanup {
    mrep close
    mrep_more close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {messagemore}



tcltest::test socket-setsockopt-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s setsockopt
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s setsockopt name value ?size?"}

tcltest::test socket-setsockopt-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s setsockopt qwerty azerty
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {bad name "qwerty": must be HWM, SWAP, AFFINITY, IDENTITY, SUBSCRIBE, UNSUBSCRIBE, RATE, RECOVERY_IVL, MCAST_LOOP, SNDBUF, RCVBUF, RCVMORE, FD, EVENTS, TYPE, LINGER, RECONNECT_IVL, BACKLOG, RECOVERY_IVL_MSEC, or RECONNECT_IVL_MAX}

tcltest::test socket-setsockopt-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx SUB
} -body {
    set ok 0
    foreach name {LINGER RECONNECT_IVL RECONNECT_IVL_MAX BACKLOG} {
	if {![catch {s setsockopt $name 0} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {HWM AFFINITY SNDBUF RCVBUF} {
	if {![catch {s setsockopt $name 0} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {SWAP RATE RECOVERY_IVL RECOVERY_IVL_MSEC MCAST_LOOP} {
	if {![catch {s setsockopt $name 0} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    foreach name {IDENTITY SUBSCRIBE UNSUBSCRIBE} {
	if {![catch {s setsockopt $name "azerty"} msg]} {
	    incr ok
	} else {
	    puts "$name : $msg"
	}
    }
    set ok
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {16}

tcltest::test socket-setsockopt-4 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    set failed 0
    foreach name {FD EVENTS TYPE RCVMORE} {
	if {[catch {s setsockopt $name} msg]} {
	    incr failed
	}
    }
    set failed
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {4}

tcltest::test socket-setsockopt-5 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s setsockopt HWM non_int
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Wrong HWM argument, expected integer}

tcltest::test socket-setsockopt-6 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s setsockopt IDENTITY "test id" non_int
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {Wrong size argument, expected integer}



tcltest::test socket-writable-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s writable 1 2 3 4
} -cleanup {
    s close
    ctx term
} -returnCodes {error} -result {wrong # args: should be "s writable ?command?"}

tcltest::test socket-writable-2 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s writable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {}

tcltest::test socket-writable-3 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket s ctx PUB
} -body {
    s writable qwerty
    s writable
} -cleanup {
    s close
    ctx term
} -returnCodes {ok} -result {qwerty}



tcltest::test socket-getsockopt-events-1 {zmq socket} -setup {
    zmq context ctx 1
    zmq socket rep ctx REP
    rep bind "ipc://test.ipc"
    zmq socket req ctx REQ
    req connect "ipc://test.ipc"
    zmq message mrep
    zmq message mrep_more
} -body {
    after 10
    lappend rt [rep getsockopt EVENTS]
    lappend rt [req getsockopt EVENTS]
    req s_sendmore "message"
    req s_send "more"
    after 10
    lappend rt [rep getsockopt EVENTS]
    lappend rt [req getsockopt EVENTS]
    rep recv mrep
    rep recv mrep_more
    after 10
    lappend rt [rep getsockopt EVENTS]
    lappend rt [req getsockopt EVENTS]
} -cleanup {
    mrep close
    req close
    rep close
    ctx term
} -returnCodes {ok} -result {{} POLLOUT POLLIN {} POLLOUT {}}
