Intro
=====

zmq is a wrapper for the zeromq library (http://www.zeromq.org/). The wrapper
is based on version 2.1 of the zeromq library. It is written using criticl 3.

License
=======

zmq uses different licenses for different parts of the code.

The 'core' of zmq (located in zmq.tcl) is licensed under LGPLv3. This just
means that if you make any changes to how that code works, you must release
those changes under the LGPL. If you just use tclzmq, then you can use any
license you want for your own code. Check COPYING.LESSER for more info.

The restrictions imposed by the LGPL make no sense for the 'non-core'
functionality in zmq (derivative code must also be LGPL or GPL), especially
for examples, so all 'non-core' code is relicensed under the more permissive BSD
(specifically Modified BSD aka New BSD aka 3-clause BSD), where possible. This
means that you can copy this code and build your own apps without needing to
license your own code with the LGPL or GPL. Checker COPYING.BSD for more info.

Building
========

On linux and windows:

- run "tclsh build.tcl"

Ths script searches for critcl and zeromq installation or sources.
Type "tclsh build.tcl --help" for more information.

Usage
=====

Loading
-------

    package require zmq

Context
-------

Create a context:

    zmq context <context_name> ?<io_threads>?

        This will create a zeromq context and a Tcl command with the specified
        <context_name> to interact with it.

Context methods:

    <context_name> term
    <context_name> destroy

Socket
------

Create a socket:

    zmq socket <socket_name> <context_name> <socket_type>

        This will create a zeromq socket and a Tcl command with the specified
        <socket_name> to interact with it.

	Supported socket types are:

  	    PAIR PUB SUB REQ REP DEALER ROUTER PULL PUSH XPUB XSUB

Socket methods:

    <socket_name> bind <addr>

    <socket_name> close

    <socket_name> connect <addr>

    <socket_name> get <option_name>
    <socket_name> getsockopt <option_name>

        Supported option names are:

	    integer options:

	        TYPE LINGER RECONNECT_IVL RECONNECT_IVL_MAX BACKLOG

	    unsigned 64 bit integer options:

	        HWM AFFINITY SNDBUF RCVBUF

	    signed 64 bit integer options:

	        RCVMORE SWAP RATE RECOVERY_IVL RECOVERY_IVL_MSEC MCAST_LOOP

	    binary options:

	        IDENTITY

	    list options:

	        EVENTS (returns list of POLLIN, POLLOUT or POLLERR)

    <socket_name> readable ?<command>?

    <socket_name> recv_msg <message_name> ?<flags>?

        Supported flags are:

	    DONTWAIT NOBLOCK SNDMORE

    <socket_name> send_msg <message_name> ?<flags>?

        Supported flags are:

	    DONTWAIT NOBLOCK SNDMORE

    <socket_name> dump

    <socket_name> recv ?<flags>?

        Supported flags are:

	    DONTWAIT NOBLOCK SNDMORE

    <socket_name> send <data> ?<flags>?

        Supported flags are:

	    DONTWAIT NOBLOCK SNDMORE

    <socket_name> sendmore <data> ?<flags>?

        Supported flags are:

	    DONTWAIT NOBLOCK SNDMORE

    <socket_name> set <option_name> <value> ?<size>?
    <socket_name> setsockopt <option_name> <value> ?<size>?

        Supported option names are:

	    integer options:

	        LINGER RECONNECT_IVL RECONNECT_IVL_MAX BACKLOG

	    unsigned 64 bit integer options:

	        HWM AFFINITY SNDBUF RCVBUF

	    signed 64 bit integer options:

	        SWAP RATE RECOVERY_IVL RECOVERY_IVL_MSEC MCAST_LOOP

	    binary options:

	        IDENTITY SUBSCRIBE UNSIGNED

    <socket_name> writable ?<command>?

Message
-------

Create a message:

    zmq message <message_name> ?-data <data>? ?-size <size>?

        This will create a zeromq message and a Tcl command with the specified
        <message_name> to interact with it.

Message methods:

    <message_name> close
    <message_name> copy <destination_message_name>
    <message_name> data
    <message_name> move <destination_message_name>
    <message_name> size
    <message_name> dump

Helper functions:

    zmsg recv <socket>
    zmsg send <socket> <message>
    zmsg unwrap <messageVariable>
    zmsg wrap <message> <data>
    zmsg push <message> <data>
    zmsg pop <messageVariable>
    zmsg add <message> <data>
    zmsg dump <message>

Polling
-------

Poll zermq sockets:

    zmq poll <poll_set> <timeout> ?<timeout_unit>?

    A <poll_set> is specified as a list of lists of:

        <socket_name>
	list of polling flags

    Supported polling flags are:

        POLLIN POLLOUT POLLERR

    Possible timeout units are:

        s : seconds
        ms : milliseconds (default)
        us : microseconds (will be removed for zmq 3.1)

Device
------

Start a built-in device:

    zmq device <device_type> <in_socket_name> <out_socket_name>

    Supported devices are:

        STREAMER FORWARDER QUEUE

Other commands
--------------

    zmq version

    zmq errno

    zmq strerror <errnum>

    zmq max_block_time <max_block_time_in_micro_seconds>
