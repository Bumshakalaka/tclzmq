[comment {-*- tcl -*- doctools manpage}]
[manpage_begin zmq n 3.3.0]
[copyright {Jos Decoster <jos.decoster@gmail.com>}]
[moddesc {A Tcl wrapper for the ZeroMQ messaging library}]
[category  {Messaging}]
[keywords {messaging}]
[keywords {inter process communication}]
[keywords {RPC}]
[keywords {message queue}]
[keywords {queue}]
[keywords {broadcast}]
[keywords {communication}]
[keywords {producer - consumer}]
[keywords {publish - subscribe}]
[titledesc {Zmq Package Reference}]
[require Tcl 8.5]
[require zmq ?3.3.0?]
[description]

The [term zmq] package is a wrapper for the ZeroMQ library. ZeroMQ can be found
at [uri http://www.zeromq.org].
[para]
The wrapper is based on version 3.3 of the ZeroMQ library. The package is
written using [term critcl] 3.
[para]
Use this documentation in combination with the ZeroMQ documentation for more
details.
[para]
All sockets in this documentation refer to ZeroMQ sockets.

[section "Contexts"]

[subsection {Context PACKAGE COMMANDS}]

[list_begin definitions]

[call [cmd {zmq context}] [opt [arg contextName]] [opt [arg {-iothreads <ioThreads>}]]]

This command creates a new ZeroMQ context object and associated Tcl object
command whose name is [arg contextName] if specified or auto generated if not
specified. The object command will be created under the current namespace if the
[arg objectName] is not fully qualified, and in the specified namespace
otherwise. The object command name is returned by this command. The object
command methods are explained in section [sectref {Context OBJECT METHODS}].

[list_end]

[subsection {Context OBJECT METHODS}]

[list_begin definitions]

[call [arg contextName] [method cget] [arg optionName]]

Get context option. See [cmd configure] method for list of supported
options.

[call [arg contextName] [method configure] [opt [arg optionName]] [opt [arg "optionValue optionName optionValue ..."]]]

Query or modify context options.  If no option is specified, returns a list
describing all of the available options. If option is specified with no value,
then the command returns the value for the specified option. If one or more
option-value pairs are specified, then the command modifies the given context
option(s) to have the given value(s); in this case the command returns an empty
string. Supported options are:

[list_begin definitions]
[def IO_THREADS] Set number of I/O threads
[def MAX_SOCKETS] Set maximum number of sockets
[def MONITOR] Set monitoring callback command. The [term zmq] wrapper will
[cmd lappend] the following data to the specified command:

[list_begin enumerated]
[enum] context
[enum] socket
[enum] event flag
[enum] event data
[list_end]

Known event flags are:

[list_begin definitions]
[def CONNECTED]
[def CONNECT_DELAYED]
[def CONNECT_RETRIED]
[def LISTENING]
[def BIND_FAILED]
[def ACCEPTED]
[def ACCEPT_FAILED]
[def CLOSED]
[def CLOSE_FAILED]
[def DISCONNECTED]
[def UNKNOWN_MONITOR_EVENT]
[list_end]

[list_end]

[call [arg contextName] [method destroy]]

Destroy the ZeroMQ context and delete the associated Tcl object command.

[call [arg contextName] [method get] [arg optionName]]

Get context option. See [cmd configure] method for list of supported options.

[call [arg contextName] [method set] [arg optionName] [arg optionValue]]

Set context option. See [cmd configure] method for list of supported options.

[list_end]

[section {Sockets}]

[subsection {Socket PACKAGE COMMANDS}]

[list_begin definitions]

[call [cmd {zmq socket}] [opt [arg socketName]] [arg contextName] [arg socketType]]

This command creates a new ZeroMQ socket object and associated Tcl object
command whose name is [arg socketName] if specified or auto generated if not
specified within the specified context and of the specified type. The object
command will be created under the current namespace if the [arg objectName] is
not fully qualified, and in the specified namespace otherwise. The object
command name is returned by this command. The object command methods are
explained in section [sectref {Socket OBJECT METHODS}].

Valid values for [arg socketType] are:

[list_begin definitions]
[def DEALER]
[def PAIR]
[def PUB]
[def PULL]
[def PUSH]
[def REP]
[def REQ]
[def ROUTER]
[def SUB]
[def XPUB]
[def XSUB]
[list_end]

[list_end]

[subsection {Socket OBJECT METHODS}]

[list_begin definitions]

[call [arg socketName] [method bind] [arg endPoint]]

Accept connections on a socket for specified endpoint.

[call [arg socketName] [method cget] [arg optionName]]

Get socket option. See [cmd configure] method for list of supported options.

[call [arg socketName] [method close]]

Close the ZeroMQ socket and delete the associated Tcl object command.

[call [arg socketName] [method configure] [opt [arg optionName]] [opt [arg "optionValue optionName optionValue ..."]]]

Query or modify socket options.  If no option is specified, returns a list
describing all of the available options. If option is specified with no value,
then the command returns the value for the specified option. If one or more
option-value pairs are specified, then the command modifies the given socket
option(s) to have the given value(s); in this case the command returns an empty
string. Supported options are:

[list_begin definitions]
[def AFFINITY] unsigned wide integer
[def BACKLOG] integer
[def DELAY_ATTACH_ON_CONNECT] integer
[def EVENTS] list of poll flags: [term POLLIN], [term POLLOUT] or [term POLLERR]
[def FAIL_UNROUTABLE] integer, write-only
[def IDENTITY] binary
[def IPV4ONLY] integer
[def LAST_ENDPOINT] binary, read-only
[def LINGER] integer
[def MAXMSGSIZE] wide integer
[def MULTICAST_HOPS] integer
[def RATE] integer
[def RCVBUF] integer
[def RCVHWM] integer
[def RCVMORE] integer, read-only
[def RCVTIMEO] integer
[def RECONNECT_IVL] integer
[def RECONNECT_IVL_MAX] integer
[def RECOVERY_IVL] integer
[def SNDBUF] integer
[def SNDHWM] integer
[def SNDTIMEO] integer
[def SUBSCRIBE] binary, write-only
[def TCP_KEEPALIVE] integer
[def TCP_KEEPALIVE_CNT] integer
[def TCP_KEEPALIVE_IDLE] integer
[def TCP_KEEPALIVE_INTVL] integer
[def TYPE] integer
[def UNSUBSCRIBE] binary, write-only
[list_end]

[call [arg socketName] [method connect] [arg endPoint]]

Connect to a socket on the specified endpoint.

[call [arg socketName] [method disconnect] [arg endPoint]]

Disconnect from a socket on the specified endpoint.

[call [arg socketName] [method dump]]

Read message from the socket and return it in human readable debug format.

[call [arg socketName] [method get] [arg optionName]]

Get socket option. See [cmd configure] method for list of supported options.

[call [arg socketName] [method readable] [opt [arg command]]]

If specified set, or if not specified get, the socket readable callback command.

[call [arg socketName] [method recv] [opt [arg flagsList]]]

Read a message part from the socket and return it as a string. Supported flags
are:

[list_begin definitions]
[def DONTWAIT] (integer)
[list_end]

[call [arg socketName] [method recv_msg] [arg message] [opt [arg flagsList]]]

Read a message part from the socket and place it in the specified message
object. Supported flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[list_end]

[call [arg socketName] [method send] [arg data] [opt [arg flagsList]]]

Send the specified data to the socket as message part. Supported flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[def SNDMORE] (integer)
[list_end]

[call [arg socketName] [method send_msg] [arg message] [opt [arg flagsList]]]

Send the message part in the specified message object to the socket. Supported
flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[def SNDMORE] (integer)
[list_end]

[call [arg socketName] [method sendmore] [arg data] [opt [arg flagsList]]]

Send the specified data to the socket as message part and indicate there are more
message parts to come. Supported flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[def SNDMORE] (integer)
[list_end]

[call [arg socketName] [method set] [arg optionName] [arg optionValue] [opt [arg optionSize]]]

Set socket option. See [cmd configure] method for list of supported options.

[call [arg socketName] [method unbind] [arg endPoint]]

Stop accepting connections on a socket for the specified endpoint.

[call [arg socketName] [method writable] [opt [arg command]]]

If specified set, or if not specified get, the socket writable callback command.

[list_end]

[section {Messages}]

[subsection {Message PACKAGE COMMANDS}]

[list_begin definitions]

[call [cmd {zmq message}] [opt [arg messageName]] [opt [arg {-size <integer>}]] [opt [arg {-data <string>}]]]

This command creates a new ZeroMQ message object and associated Tcl object
command whose name is [arg messageName] if specified or auto generated if not
specified with specified size and data. The object command will be created under
the current namespace if the [arg objectName] is not fully qualified, and in the
specified namespace otherwise. The object command name is returned by this
command. The object command methods are explained in section [sectref {Message OBJECT METHODS}].

[para]
The use of this message type is not needed with the wrapper. Check the
[sectref {Socket OBJECT METHODS}] for socket commands directly reading and writing string
and [sectref {Message helper functions}] for utility functions to read and write
strings.

[list_end]

[subsection {Message OBJECT METHODS}]

[list_begin definitions]

[call [arg messageName] [method cget] [arg optionName]]

Get message option. See [cmd configure] method for list of supported options.

[call [arg messageName] [method close]]

Close the ZeroMQ message and delete the associated Tcl object command.

[call [arg messageName] [method configure] [opt [arg optionName]] [opt [arg "optionValue optionName optionValue ..."]]]

Query or modify message options.  If no option is specified, returns a list
describing all of the available options. If option is specified with no value,
then the command returns the value for the specified option. If one or more
option-value pairs are specified, then the command modifies the given message
option(s) to have the given value(s); in this case the command returns an empty
string. Supported options are:

[list_begin definitions]
[def MORE] integer, read-only
[list_end]

[call [arg messageName] [method copy] [arg destinationMessageName]]

Copy the message to the specified message.

[call [arg messageName] [method data]]

Get the message data as a (binary) string.

[call [arg messageName] [method dump]]

Get the message as a human readable string.

[call [arg messageName] [method get] [arg optionName]]

Get message option. See [cmd configure] method for list of supported options.

[call [arg messageName] [method more]]

Get indication if more messages are to be received as part of a multi part
message.

[call [arg messageName] [method move] [arg destinationMessageName]]

Move contents to the specified message.

[call [arg messageName] [method recv] [arg socketName] [opt [arg flagsList]]]

Receive a message on the specified socket. Supported flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[list_end]

[call [arg messageName] [method send] [arg socketName] [opt [arg flagsList]]]

Send a message to the specified socket as message part. Supported flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[def SNDMORE] (integer)
[list_end]

[call [arg messageName] [method sendmore] [arg socketName] [opt [arg flagsList]]]

Send a message to the specified socket as message part and indicate there are
more parts to come as part of a multi part message. Supported flags are:

[list_begin definitions]
[def DONTWAIT] (integer)
[def SNDMORE] (integer)
[list_end]

[call [arg messageName] [method set] [arg optionName] [arg optionValue]]

Set message option. See [cmd configure] method for list of supported options.

[call [arg messageName] [method size]]

Return the size of the message data part.

[list_end]

[section {Multi-part message helper functions}]

ZeroMQ sends multi-part messages (e.g. when using envelopes). These helper
functions can be used to make it easier to handle those. Data is specified as a
(binary) string. A multi-part message is specified a a list of (binary) strings.

[list_begin definitions]

[call [cmd {zmsg add}] [arg messageList] [arg data]]

Add a message part to a multi-part message. The updated multi-part message is
returned.

[call [cmd {zmsg dump}] [arg messageList]]

Return the multi-part message in a human readable form.

[call [cmd {zmsg pop}] [arg messageListName]]

Pop a message part from the beginning of the specified multi-part message. The
popped message part is returned and the specified multi-part message is modified.

[call [cmd {zmsg push}] [arg messageList] [arg data]]

Push a message part to the beginning of a multi-part message. The modified
multi-part message is returned.

[call [cmd {zmsg recv}] [arg socketName]]

Receive a multi-part message on the specified socket. The received message is
returned.

[call [cmd {zmsg send}] [arg socketName] [arg messageList]]

Send a multi-part message to the specified socket.

[call [cmd {zmsg unwrap}] [arg messageListName]]

Unwrap multi-part message. The unwrapped message part is returned. An empty
message-part following the unwrapped message part (e.g as part of an envelope)
is also removed.

[call [cmd {zmsg wrap}] [arg messageList] [arg data]]

Wrap the multi-part message with the specified data. An empty message part is
inserted between the specified data and the spoecified multi-part message.

[list_end]

[section {Polling}]

[list_begin definitions]

[call [cmd {zmq poll}] [arg pollList] [arg timeout] [opt [arg timeoutUnit]]]

Poll the specified sockets for the specifed events. A maximum timeout must be
specified. If the value of timeout is 0, the command returns immediately. If the
value of timeout is -1, the command will block indefinitely until a specified
event occurs. The polling list if specified as a list of poll requests. Such a poll request is a list of:

[list_begin enumerated]
[enum] socket
[enum] list of event flags
[list_end]

Supported event flags are:

[list_begin definitions]
[def POLLIN]
[def POLLOUT]
[list_end]

The poll command will return a list in the same format as the input polling list
with list items for each item in the original list for which an event occured
and in the list of event flags the events which occured.

[list_end]

[section {Devices}]

[list_begin definitions]

[call [cmd {zmq device}] [arg deviceType] [arg inputSocketName] [arg outputSocketName]]

Start a built-in ZeroMQ device. Known devices are:

[list_begin definitions]
[def FORWARDER]
[def QUEUE]
[def STREAMER]
[list_end]

[list_end]

[section {Miscellaneous}]

[list_begin definitions]

[call [cmd {zmq version}]]

Return the ZeroMQ version used by the Tcl wrapper.

[call [cmd {zmq errno}]]

Return the last returned ZeroMQ error code.

[call [cmd {zmq strerror}] [arg errorNumber]]

Return the human readable string for a ZeroMQ error code.

[call [cmd {zmq max_block_time}] [arg blockTime]]

Set maximum blocking time for the Tcl event loop waiting for ZeroMQ event in
micro seconds. Default is 1000 micro seconds.

[list_end]

[section Examples]

Tcl example can be found in the [uri {http://zguide.zeromq.org/page:all} {ZeroMQ Guide}].

[section "Bugs, ideas, feedback"]

This document, and the package it describes, will undoubtedly contain
bugs and other problems.

Please report such at the [uri {https://github.com/jdc8/tclzmq/issues} {Github tracker}].

Please also report any ideas for enhancements you may have for either
package and/or documentation.

[section "License"]

[term zmq] uses different licenses for different parts of the code.

The 'core' of [term zmq] (located in [term zmq.tcl]) is licensed under
LGPLv3. This just means that if you make any changes to how that code works, you
must release those changes under the LGPL. If you just use [term zmq], then you
can use any license you want for your own code. Check [term COPYING.LESSER] for
more info.
[para]
The restrictions imposed by the LGPL make no sense for the 'non-core'
functionality in [term zmq] (derivative code must also be LGPL or GPL),
especially for examples, so all 'non-core' code is relicensed under the more
permissive BSD (specifically Modified BSD aka New BSD aka 3-clause BSD), where
possible. This means that you can copy this code and build your own apps without
needing to license your own code with the LGPL or GPL. Check [term COPYING.BSD]
for more info.

[manpage_end]
